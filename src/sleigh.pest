sleigh = _{ SOI ~ spec ~ EOI }

// Ignored things, Errors
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }
WHITESPACE = _{ "\r" | " " | "\t" | "\n" }

spec = { endiandef ~ (definition | constructorlike)* }
endiandef = { KEY_DEFINE ~ KEY_ENDIAN ~ ASSIGN ~ endian ~ SEMI }
endian = _{ KEY_BIG | KEY_LITTLE }

definition = _{
      (
          aligndef
        | tokendef
        | contextdef
        | spacedef
        | varnodedef
        | bitrangedef
        | pcodeopdef
        | valueattach
        | nameattach
        | varattach
    ) ~ SEMI
}

aligndef = { KEY_DEFINE ~ KEY_ALIGNMENT ~ ASSIGN ~ integer }

tokendef = { KEY_DEFINE ~ KEY_TOKEN ~ IDENTIFIER ~ LPAREN ~ integer ~ RPAREN ~ fielddef* }
fielddef = { IDENTIFIER ~ ASSIGN ~ LPAREN ~ integer ~ COMMA ~ integer ~ RPAREN ~ fieldmod* }
fieldmod = {
      KEY_SIGNED
    | KEY_HEX
    | KEY_DEC
}

contextdef = { KEY_DEFINE ~ KEY_CONTEXT ~ IDENTIFIER ~ contextfielddefs }
contextfielddefs = { contextfielddef* }
contextfielddef = { IDENTIFIER ~ ASSIGN ~ LPAREN ~ integer ~ COMMA ~ integer ~ RPAREN
      ~ contextfieldmods
}
contextfieldmods = { contextfieldmod* }
contextfieldmod = {
      KEY_SIGNED
    | KEY_NOFLOW
    | KEY_HEX
    | KEY_DEC
}

spacedef = { KEY_DEFINE ~ KEY_SPACE ~ IDENTIFIER ~ spacemods }
spacemods = { spacemod* }
spacemod = {
      typemod
    | sizemod
    | wordsizemod
    | KEY_DEFAULT
}
typemod = { KEY_TYPE ~ ASSIGN ~ type_ }
type_ = _{ IDENTIFIER }
sizemod = { KEY_SIZE ~ ASSIGN ~ integer }
wordsizemod = { KEY_WORDSIZE ~ ASSIGN ~ integer }

varnodedef = { KEY_DEFINE ~ IDENTIFIER ~ KEY_OFFSET ~ ASSIGN ~ integer ~ KEY_SIZE ~ ASSIGN
      ~ integer ~ identifierlist }

bitrangedef = { KEY_DEFINE ~ KEY_BITRANGE ~ bitranges }
bitranges = { bitrange+ }
bitrange = { IDENTIFIER ~ ASSIGN ~ IDENTIFIER ~ LBRACKET ~ integer ~ COMMA ~ integer
      ~ RBRACKET
}

pcodeopdef = { KEY_DEFINE ~ KEY_PCODEOP ~ identifierlist }

valueattach = { KEY_ATTACH ~ KEY_VALUES ~ identifierlist ~ intblist }

nameattach = { KEY_ATTACH ~ KEY_NAMES ~ identifierlist ~ stringoridentlist }

varattach = { KEY_ATTACH ~ KEY_VARIABLES ~ identifierlist ~ identifierlist }

identifierlist = {
      LBRACKET ~ id_or_wild+ ~ RBRACKET
    | id_or_wild
}
stringoridentlist = {
      LBRACKET ~ stringorident+ ~ RBRACKET
      | stringorident
}
stringorident = {
      id_or_wild
    | qstring
}
intblist = {
      LBRACKET ~ intbpart+ ~ RBRACKET
      | neginteger
}
intbpart = {
      neginteger
    | UNDERSCORE
}
neginteger = {
      integer
    | MINUS ~ integer
}

constructorlike = {
      macrodef
    | withblock
    | constructor
}
macrodef = { KEY_MACRO ~ IDENTIFIER ~ LPAREN ~ arguments ~ RPAREN ~ semanticbody }
arguments = { oplist? }
oplist = { IDENTIFIER ~ (COMMA ~ IDENTIFIER)* }

withblock = { RES_WITH ~ id_or_nil ~ COLON ~ bitpat_or_nil ~ contextblock ~ LBRACE
      ~ constructorlikelist ~ RBRACE
}
id_or_nil = { IDENTIFIER? }
bitpat_or_nil = { bitpattern? }
constructorlikelist = { def_or_conslike* }
def_or_conslike = {
      definition
    | constructorlike
}

constructor = { ctorstart ~ bitpattern ~ contextblock ~ ctorsemantic }
ctorsemantic = {
      semanticbody
    | KEY_UNIMPL
}
bitpattern = { pequation }
ctorstart = {
      IDENTIFIER ~ display
    | display
}

contextblock = { (LBRACKET ~ ctxstmts ~ RBRACKET)? }
ctxstmts = { ctxstmt* }
ctxstmt = { (ctxassign | pfuncall) ~ SEMI }
ctxassign = { ctxlval ~ ASSIGN ~ pexpression }
ctxlval = { IDENTIFIER }
pfuncall = { pexpression_apply }
pequation = { pequation_or }
pequation_or = { pequation_seq ~ (pequation_or_op ~ pequation_seq)* }
pequation_or_op = { PIPE }
pequation_seq = { pequation_and ~ (pequation_seq_op ~ pequation_and)* }
pequation_seq_op = { SEMI }
pequation_and = { pequation_ellipsis ~ (pequation_and_op ~ pequation_ellipsis)* }
pequation_and_op = { AMPERSAND }
pequation_ellipsis = {
      ELLIPSIS ~ pequation_ellipsis_right
    | pequation_ellipsis_right
}
pequation_ellipsis_right = {
      pequation_atomic ~ ELLIPSIS
      | pequation_atomic
}
pequation_atomic = {
      constraint
      | LPAREN ~ pequation ~ RPAREN
}
constraint = { IDENTIFIER ~ (constraint_op ~ pexpression2)? }
constraint_op = {
      ASSIGN
    | NOTEQUAL
    | LESS
    | LESSEQUAL
    | GREAT
    | GREATEQUAL
}
pexpression = { pexpression_or }
pexpression_or = { pexpression_xor ~ (pexpression_or_op ~ pexpression_xor)* }
pexpression_or_op = {
      PIPE
      | SPEC_OR
}
pexpression_xor = { pexpression_and ~ (pexpression_xor_op ~ pexpression_and)* }
pexpression_xor_op = {
      CARET
      | SPEC_XOR
}
pexpression_and = { pexpression_shift ~ (pexpression_and_op ~ pexpression_shift)* }
pexpression_and_op = {
      AMPERSAND
      | SPEC_AND
}
pexpression_shift = { pexpression_add ~ (pexpression_shift_op ~ pexpression_add)* }
pexpression_shift_op = {
      LEFT
      | RIGHT
}
pexpression_add = { pexpression_mult ~ (pexpression_add_op ~ pexpression_mult)* }
pexpression_add_op = {
      PLUS
      | MINUS
}
pexpression_mult = { pexpression_unary ~ (pexpression_mult_op ~ pexpression_unary)* }
pexpression_mult_op = {
      ASTERISK
      | SLASH
}
pexpression_unary = {
      pexpression_unary_op ~ pexpression_term
      | pexpression_func
}
pexpression_unary_op = {
      MINUS
      | TILDE
}
pexpression_func = {
      pexpression_apply
      | pexpression_term
}
pexpression_apply = { IDENTIFIER ~ pexpression_operands }
pexpression_operands = { LPAREN ~ (pexpression ~ (COMMA ~ pexpression)*)? ~ RPAREN }
pexpression_term = {
      IDENTIFIER
    | integer
    | LPAREN ~ pexpression ~ RPAREN
}
pexpression2 = { pexpression2_or }
pexpression2_or = { pexpression2_xor ~ (pexpression2_or_op ~ pexpression2_xor)* }
pexpression2_or_op = { SPEC_OR }
pexpression2_xor = { pexpression2_and ~ (pexpression2_xor_op ~ pexpression2_and)* }
pexpression2_xor_op = { SPEC_XOR }
pexpression2_and = { pexpression2_shift ~ (pexpression2_and_op ~ pexpression2_shift)* }
pexpression2_and_op = { SPEC_AND }
pexpression2_shift = { pexpression2_add ~ (pexpression2_shift_op ~ pexpression2_add)* }
pexpression2_shift_op = {
      LEFT
    | RIGHT
}
pexpression2_add = { pexpression2_mult ~ (pexpression2_add_op ~ pexpression2_mult)* }
pexpression2_add_op = {
      PLUS
    | MINUS
}
pexpression2_mult = { pexpression2_unary ~ (pexpression2_mult_op ~ pexpression2_unary)* }
pexpression2_mult_op = {
      ASTERISK
    | SLASH
}
pexpression2_unary = {
      pexpression2_unary_op ~ pexpression2_term
    |	pexpression2_func
}
pexpression2_unary_op = {
      MINUS
    | TILDE
}
pexpression2_func = {
      pexpression2_apply
    |	pexpression2_term
}
pexpression2_apply = { IDENTIFIER ~ pexpression2_operands }
pexpression2_operands = { LPAREN ~ (pexpression2 ~ (COMMA ~ pexpression2)*)? ~ RPAREN }
pexpression2_term = {
      IDENTIFIER
    |	integer
    |	LPAREN ~ pexpression2 ~ RPAREN
}

id_or_wild = { IDENTIFIER | wildcard }
wildcard = { UNDERSCORE }
integer = _{ HEX_INT | BIN_INT | DEC_INT }

// Reserved words and keywords
RES_WITH = _{ "with" }

KEY_ALIGNMENT = _{ "alignment" }
KEY_ATTACH = _{ "attach" }
KEY_BIG = { "big" }
KEY_BITRANGE = _{ "bitrange" }
KEY_BUILD = _{ "build" }
KEY_CALL = _{ "call" }
KEY_CONTEXT = _{ "context" }
KEY_CROSSBUILD = _{ "crossbuild" }
KEY_DEC = { "dec" }
KEY_DEFAULT = { "default" }
KEY_DEFINE = _{ "define" }
KEY_ENDIAN = _{ "endian" }
KEY_EXPORT = _{ "export" }
KEY_GOTO = _{ "goto" }
KEY_HEX = { "hex" }
KEY_LITTLE = { "little" }
KEY_LOCAL = _{ "local" }
KEY_MACRO = _{ "macro" }
KEY_NAMES = _{ "names" }
KEY_NOFLOW = _{ "noflow" }
KEY_OFFSET = _{ "offset" }
KEY_PCODEOP = _{ "pcodeop" }
KEY_RETURN = _{ "return" }
KEY_SIGNED = { "signed" }
KEY_SIZE = _{ "size" }
KEY_SPACE = _{ "space" }
KEY_TOKEN = _{ "token" }
KEY_TYPE = _{ "type" }
KEY_UNIMPL = _{ "unimpl" }
KEY_VALUES = _{ "values" }
KEY_VARIABLES = _{ "variables" }
KEY_WORDSIZE = _{ "wordsize" }

// Grouping, block, and sectioning symbols
LBRACE = _{ "{" }
RBRACE = _{ "}" }
LBRACKET = _{ "[" }
RBRACKET = _{ "]" }
LPAREN = _{ "(" }
RPAREN = _{ ")" }

// Miscellaneous
ELLIPSIS = _{ "..." }
UNDERSCORE = { "_" }
COLON = _{ ":" }
COMMA = _{ "," }
EXCLAIM = _{ "!" }
TILDE = _{ "~" }
SEMI = _{ ";" }

// ----------
// Operators:
// ----------

ASSIGN = _{ "=" }

// Comparisons
EQUAL = _{ "==" }
NOTEQUAL = _{ "!=" }
LESS = _{ "<" }
GREAT = _{ ">" }
LESSEQUAL = _{ "<=" }
GREATEQUAL = _{ ">=" }

// Boolean and bitwise logic operations
BOOL_OR = _{ "||" }
BOOL_XOR = _{ "^^" }
BOOL_AND = _{ "&&" }
PIPE = _{ "|" }
CARET = _{ "^" }
AMPERSAND = _{ "&" }

// Shifting operations
LEFT = _{ "<<" }
RIGHT = _{ ">>" }

// Arithmetic operations
PLUS = _{ "+" }
MINUS = { "-" }
ASTERISK = _{ "*" }
SLASH = _{ "/" }
PERCENT = _{ "%" }

// Explicitly named boolean operations
SPEC_OR = _{ "$or" }
SPEC_AND = _{ "$and" }
SPEC_XOR = _{ "$xor" }

// IDs, Literals
IDENTIFIER = @{ !(UNDERSCORE ~ &(!IDENTIFIER | EOI)) ~ ALPHA_UP ~ (ALPHA_UP | ASCII_DIGIT)* }
ALPHA_UP = { ASCII_ALPHA | "_" | "." }
qstring = ${ "\"" ~ STRING ~ "\"" }
STRING = @{ (ESCAPE | STRING_TEXT)* }
STRING_TEXT = { !("\\" | "\"") ~ ANY }
ESCAPE = {
      "\\" ~ ("b" | "t" | "n" | "f" | "r" | "\"" | "'" | "\\")
    | UNICODE_ESCAPE
    | OCTAL_ESCAPE
}
UNICODE_ESCAPE = { "\\" ~ "u" ~ ASCII_HEX_DIGIT{4} }
OCTAL_ESCAPE = { "\\" ~ ('0'..'3')? ~ ASCII_OCT_DIGIT{1,2} }
DEC_INT = @{ ASCII_DIGIT+ }
HEX_INT = @{ "0x" ~ ASCII_HEX_DIGIT+ }
BIN_INT = @{ "0b" ~ ASCII_BIN_DIGIT+ }

// ---------------------
// Semantic Lexer/Parser
// ---------------------

semanticbody = { LBRACE ~ semantic ~ RBRACE }
semantic = { code_block }
code_block = { statements? }
statements = { statement+ }

label = { LESS ~ IDENTIFIER ~ GREAT }
section_def = { LEFT ~ IDENTIFIER ~ RIGHT }
statement = {
      (
          assignment
        | declaration
        | funcall
        | build_stmt
        | crossbuild_stmt
        | goto_stmt
        | cond_stmt
        | call_stmt
        | export
        | return_stmt
    )? ~ SEMI
    | label
    | section_def
    | outererror
}

outererror = {
      EQUAL
    | NOTEQUAL
    |	FEQUAL
    |	FNOTEQUAL
    |	LESSEQUAL
    |	GREATEQUAL
    |	SLESS
    |	SGREAT
    |	SLESSEQUAL
    |	SGREATEQUAL
    |	FLESS
    |	FGREAT
    |	FLESSEQUAL
    |	FGREATEQUAL
    |	ASSIGN
    |	COLON
    |	COMMA
    |	RBRACKET
    |	BOOL_OR
    |	BOOL_XOR
    |	BOOL_AND
    |	PIPE
    |	CARET
    |	AMPERSAND
    |	SRIGHT
    |	PLUS
    |	MINUS
    |	FPLUS
    |	FMINUS
    |	SLASH
    |	PERCENT
    |	SDIV
    |	SREM
    |	FMULT
    |	FDIV
    |	TILDE
    |	LPAREN
    |	RPAREN
}

assignment = {
      KEY_LOCAL ~ lvalue ~ ASSIGN ~ expr
    | lvalue ~ ASSIGN ~ expr
}

declaration = { KEY_LOCAL ~ IDENTIFIER ~ (COLON ~ constant)? }
lvalue = {
      sembitrange
    | identifier_if ~ (COLON ~ constant)?
    | sizedstar ~ expr
}
sembitrange = { IDENTIFIER ~ LBRACKET ~ constant ~ COMMA ~ constant ~ RBRACKET }
sizedstar = { ASTERISK ~ ((LBRACKET ~ IDENTIFIER ~ RBRACKET)? ~ (COLON ~ constant)?)? }
funcall = { expr_apply }
build_stmt = { KEY_BUILD ~ IDENTIFIER }
crossbuild_stmt = { KEY_CROSSBUILD ~ varnode ~ COMMA ~ IDENTIFIER }
goto_stmt = { KEY_GOTO ~ jumpdest }
jumpdest = {
      IDENTIFIER
    | LBRACKET ~ expr ~ RBRACKET
    | integer
    | constant ~ LBRACKET ~ IDENTIFIER ~ RBRACKET
    | label
}
cond_stmt = { RES_IF ~ expr ~ goto_stmt }
call_stmt = { KEY_CALL ~ jumpdest }
return_stmt = { KEY_RETURN ~ LBRACKET ~ expr ~ RBRACKET }
sizedexport = { sizedstar ~ IDENTIFIER }
export = {
      KEY_EXPORT ~ sizedexport
    | KEY_EXPORT ~ varnode
}

expr = { expr_boolor }
expr_boolor = { expr_booland ~ (expr_boolor_op ~ expr_booland)* }
expr_boolor_op = { BOOL_OR }
expr_booland = { expr_or ~ (expr_booland_op ~ expr_or)* }
expr_booland_op = {
      BOOL_AND
    | BOOL_XOR
}
expr_or = { expr_xor ~ (expr_or_op ~ expr_xor)* }
expr_or_op = { PIPE }
expr_xor = { expr_and ~ (expr_xor_op ~ expr_and)* }
expr_xor_op = { CARET }
expr_and = { expr_eq ~ (expr_and_op ~ expr_eq)* }
expr_and_op = { AMPERSAND }
expr_eq = { expr_comp ~ (expr_eq_op ~ expr_comp)* }
expr_eq_op = {
      FNOTEQUAL
    | FEQUAL
    | NOTEQUAL
    | EQUAL
}
expr_comp = { expr_shift ~ (expr_compare_op ~ expr_shift)* }
expr_compare_op = {
      FLESSEQUAL
    |	SLESSEQUAL
    |	GREATEQUAL
    |	LESSEQUAL
    |	SGREATEQUAL
    |	FGREATEQUAL
    |	SLESS
    |	SGREAT
    |	FLESS
    |	FGREAT
    |	GREAT
    | LESS
}
expr_shift = { expr_add ~ (expr_shift_op ~ expr_add)* }
expr_shift_op = {
      LEFT
    | RIGHT
    | SRIGHT
}
expr_add = { expr_mult ~ (expr_add_op ~ expr_mult)* }
expr_add_op = {
      PLUS
    | MINUS
    | FPLUS
    | FMINUS
}
expr_mult = { expr_unary ~ (expr_mult_op ~ expr_unary)* }
expr_mult_op = {
      SDIV
    | SREM
    | FMULT
    | FDIV
    | ASTERISK
    | SLASH
    | PERCENT
}
expr_unary = { expr_unary_op? ~ expr_func }
expr_unary_op = {
      sizedstar
    | FMINUS
    | EXCLAIM
    | TILDE
    | MINUS
}
expr_func = {
      expr_apply
    | expr_term
}
expr_apply = { identifier_if ~ expr_operands }
expr_operands = { LPAREN ~ (expr ~ (COMMA ~ expr)*)? ~ RPAREN }
expr_term = {
      sembitrange
    | LPAREN ~ expr ~ RPAREN
    | varnode
}
varnode = {
      integer ~ (COLON ~ constant)?
    | AMPERSAND ~ (COLON ~ constant)? ~ varnode
    | IDENTIFIER ~ (COLON ~ constant)?
}
constant = { integer }
identifier_if = _{ !(RES_IF) ~ IDENTIFIER }

// Floating-point comparisons
FEQUAL = { "f==" }
FNOTEQUAL = { "f!=" }
FLESS = { "f<" }
FGREAT = { "f>" }
FLESSEQUAL = { "f<=" }
FGREATEQUAL = { "f>=" }

// Floating-point operations
FPLUS = { "f+" }
FMINUS = { "f-" }
FMULT = { "f*" }
FDIV = { "f/" }

// Signed comparisons
SLESS = { "s<" }
SGREAT = { "s>" }
SLESSEQUAL = { "s<=" }
SGREATEQUAL = { "s>=" }

// Signed operations
SRIGHT = { "s>>" }
SDIV = { "s/" }
SREM = { "s%" }

// Reserved words
RES_IF = { "if" }

// ---------------------
// Display Lexer/Parser
// ---------------------

display = ${ COLON ~ pieces ~ RES_IS }

pieces = { printpiece* }
printpiece = {
      identifier_is
    | whitespace
    | concatenate
    | qstring
    | special
}
identifier_is = _{ !(RES_IS ~ !ASCII_ALPHANUMERIC) ~ IDENTIFIER }

whitespace = { WHITESPACE }

concatenate = { CARET }

special = {
      DISPCHAR
    | LINECOMMENT
    | LBRACE
    | RBRACE
    | LBRACKET
    | RBRACKET
    | LPAREN
    | RPAREN
    | ELLIPSIS
    | EQUAL
    | NOTEQUAL
    | LESS
    | GREAT
    | LESSEQUAL
    | GREATEQUAL
    | ASSIGN
    | COLON
    | COMMA
    | ASTERISK
    | BOOL_OR
    | BOOL_XOR
    | BOOL_AND
    | PIPE
    | AMPERSAND
    | LEFT
    | RIGHT
    | PLUS
    | MINUS
    | SLASH
    | PERCENT
    | EXCLAIM
    | TILDE
    | SEMI
    | SPEC_OR
    | SPEC_AND
    | SPEC_XOR
    | DEC_INT
    | HEX_INT
    | BIN_INT
}

DISPCHAR = { "@" | "$" | "?" }

LINECOMMENT = { "#" }

RES_IS = { "is" }
