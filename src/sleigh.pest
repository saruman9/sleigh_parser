sleigh = _{ SOI ~ stmt+ ~ EOI }

// Ignored things, Errors
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }
WHITESPACE = _{ "\r" | " " | "\t" | "\n" }

stmt = _{ pp_position | qstring }

// Preprocessor-generated directives
pp_position = ${ PP_ESCAPE ~ PP_FILE ~ "###" ~ PP_LINE ~ PP_ESCAPE }
PP_FILE = @{ (!(NEWLINE | PP_ESCAPE | "###") ~ ANY)* }
PP_LINE = @{ ASCII_DIGIT+ }
PP_ESCAPE = _{ "\x08" }

// Reserved words and keywords
RES_WITH = { "with" }

KEY_ALIGNMENT = { "alignment" }
KEY_ATTACH = { "attach" }
KEY_BIG = { "big" }
KEY_BITRANGE = { "bitrange" }
KEY_BUILD = { "build" }
KEY_CALL = { "call" }
KEY_CONTEXT = { "context" }
KEY_CROSSBUILD = { "crossbuild" }
KEY_DEC = { "dec" }
KEY_DEFAULT = { "default" }
KEY_DEFINE = { "define" }
KEY_ENDIAN = { "endian" }
KEY_EXPORT = { "export" }
KEY_GOTO = { "goto" }
KEY_HEX = { "hex" }
KEY_LITTLE = { "little" }
KEY_LOCAL = { "local" }
KEY_MACRO = { "macro" }
KEY_NAMES = { "names" }
KEY_NOFLOW = { "noflow" }
KEY_OFFSET = { "offset" }
KEY_PCODEOP = { "pcodeop" }
KEY_RETURN = { "return" }
KEY_SIGNED = { "signed" }
KEY_SIZE = { "size" }
KEY_SPACE = { "space" }
KEY_TOKEN = { "token" }
KEY_TYPE = { "type" }
KEY_UNIMPL = { "unimpl" }
KEY_VALUES = { "values" }
KEY_VARIABLES = { "variables" }
KEY_WORDSIZE = { "wordsize" }

// Grouping, block, and sectioning symbols
LBRACE = { "{" }
RBRACE = { "}" }
LBRACKET = { "[" }
RBRACKET = { "]" }
LPAREN = { "(" }
RPAREN = { ")" }

// Miscellaneous
ELLIPSIS = { "..." }
UNDERSCORE = { "_" }
COLON = { ":" }
COMMA = { "," }
EXCLAIM = { "!" }
TILDE = { "~" }
SEMI = { ";" }

// ----------
// Operators:
// ----------

ASSIGN = { "=" }

// Comparisons
EQUAL = { "==" }
NOTEQUAL = { "!=" }
LESS = { "<" }
GREAT = { ">" }
LESSEQUAL = { "<=" }
GREATEQUAL = { ">=" }

// Boolean and bitwise logic operations
BOOL_OR = { "||" }
BOOL_XOR = { "^^" }
BOOL_AND = { "&&" }
PIPE = { "|" }
CARET = { "^" }
AMPERSAND = { "&" }

// Shifting operations
LEFT = { "<<" }
RIGHT = { ">>" }

// Arithmetic operations
PLUS = { "+" }
MINUS = { "-" }
ASTERISK = { "*" }
SLASH = { "/" }
PERCENT = { "%" }

// Explicitly named boolean operations
SPEC_OR = { "$or" }
SPEC_AND = { "$and" }
SPEC_XOR = { "$xor" }

// IDs, Literals
IDENTIFIER = @{ ALPHA_UP ~ (ALPHA_UP | ASCII_DIGIT )* }
ALPHA_UP = { ASCII_ALPHA | "_" | "." }
qstring = ${ "\"" ~ STRING ~ "\"" }
STRING = @{ (ESCAPE | STRING_TEXT)* }
STRING_TEXT = { !("\\" | "\"") ~ ANY }
ESCAPE = {
    "\\" ~ ("b" | "t" | "n" | "f" | "r" | "\"" | "'" | "\\")
  | UNICODE_ESCAPE
  | OCTAL_ESCAPE
}
UNICODE_ESCAPE = { "\\" ~ "u" ~ ASCII_HEX_DIGIT{4} }
OCTAL_ESCAPE = { "\\" ~ ('0'..'3')? ~ ASCII_OCT_DIGIT{1,2} }
DEC_INT = @{ ASCII_DIGIT+ }
HEX_INT = @{ "0x" ~ ASCII_HEX_DIGIT+ }
BIN_INT = @{ "0b" ~ ASCII_BIN_DIGIT+ }
