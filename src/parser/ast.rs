#[derive(Debug)]
pub enum Term {
    Add,
    AddressOf,
    Alignment(Box<Term>),
    And,
    Apply,
    Arguments,
    Assign,
    Big,
    BinConstant(String),
    Bitrange,
    Bitrange2,
    Bitranges,
    BitPattern,
    BoolAnd,
    BoolOr,
    BoolXor,
    Build,
    Call,
    Concatenate,
    Constructor,
    Context(Box<Term>, Box<Term>),
    ContextBlock,
    Crossbuild,
    Ctlist,
    Dec,
    DeclarativeSize,
    DecConstant(String),
    Default,
    Dereference,
    Display,
    Div,
    Ellipsis,
    EllipsisRight,
    EmptyList,
    Endian(Box<Endian>),
    Equal,
    Export,
    Fadd,
    Fdiv,
    Fequal,
    Fgreat,
    Fgreatequal,
    FieldDef(Box<Term>, Box<Term>, Box<Term>, Box<Term>),
    FieldDefs(Vec<Term>),
    FieldMods(Vec<FieldMod>),
    Fless,
    Flessequal,
    Fmult,
    Fnegate,
    Fnotequal,
    Fsub,
    Goto,
    Great,
    Greatequal,
    Hex,
    HexConstant(String),
    Identifier(String),
    IdentifierList,
    If,
    Intblist,
    Invert,
    JumpdestAbsolute,
    JumpdestDynamic,
    JumpdestLabel,
    JumpdestRelative,
    JumpdestSymbol,
    Label,
    Left,
    Less,
    LessEqual,
    Little,
    Local,
    Macro,
    Mult,
    Names,
    Negate,
    Nil,
    Noflow,
    Nop,
    Not,
    NotEqual,
    NotDefault,
    NoContextBlock,
    NoFieldMod,
    Or,
    Parenthesized,
    Pcode,
    Pcodeop,
    Qstring,
    Rem,
    Return,
    Right,
    Sdiv,
    SectionLabel,
    Semantic,
    Sequence,
    Sgreat,
    Sgreatequal,
    Signed,
    SizingSize,
    Size,
    Sless,
    Slessequal,
    Space,
    Spacemods,
    Spec(Box<Term>, Vec<Term>),
    Srem,
    Sright,
    String,
    StringOrIdentList,
    Sub,
    Subtable,
    Table,
    Token(Box<Term>, Box<Term>, Box<Term>),
    TruncationSize,
    Type,
    Unimpl,
    Values,
    Variables,
    Varnode,
    Whitespace,
    Wildcard,
    With,
    Wordsize,
    Xor,
}

#[derive(Debug)]
pub enum Endian {
    Big,
    Little,
}

#[derive(Debug)]
pub enum FieldMod {
    Signed,
    NoFlow,
    Hex,
    Dec,
}
